#!/bin/bash
#SBATCH --job-name=plsa2d
#SBATCH --account=p697_norment
#SBATCH --time=48:00:00
#SBATCH --ntasks=1
#SBATCH --mem-per-cpu=8000M  # 502 GB available => 502*1024/64 = 8032 MB max per core
#SBATCH --cpus-per-task=8    # remember to update --threads argument below!
#SBATCH --array=1-20
#SBATCH --chdir slurm

source /cluster/bin/jobsetup

test $SCRATCH && module load singularity/3.7.1 

export THREADS=8

export APPTAINER_BIND=
export SINGULARITY_BIND=
export MIXER_SIF=/ess/p697/data/durable/s3-api/github/precimed/gsa-mixer/containers/latest/gsa-mixer.sif
md5sum ${MIXER_SIF}

export MIXER_PY="singularity exec --home $PWD:/home --bind /ess/p697:/ess/p697 ${MIXER_SIF} python         /tools/mixer/precimed/mixer.py"
export MIXER_FIGURES_PY="singularity exec --home $PWD:/home --bind /ess/p697:/ess/p697 ${MIXER_SIF} python /tools/mixer/precimed/mixer_figures.py"

export ANALYSIS_ROOT=<your_working_folder>
export OUT_FOLDER=${ANALYSIS_ROOT}/out
export SUMSTATS_FOLDER=${ANALYSIS_ROOT}/sumstats

# Here is an example of how to trigger MIXER_UNIVAR.job (once all sumstats are copied to ${SUMSTATS_FOLDER})
# Remember to create 'slurm' and 'out' folders

#sbatch MIXER_UNIVAR.job PGC_SCZ_0518_EUR
#sbatch MIXER_UNIVAR.job GIANT_HEIGHT_2018_UKB
#sbatch MIXER_UNIVAR.job PGC_BIP_2019_wave3
#sbatch MIXER_UNIVAR.job SSGAC_EDU_2018_no23andMe

export SUMSTATS_FILE=$1

export REFERENCE_FOLDER=/ess/p697/data/durable/s3-api/github/precimed/mixer_private_docker/reference
export REP=${SLURM_ARRAY_TASK_ID}
export LOADLIB_FILE=/ess/p697/cluster/projects/moba_qc_imputation/resources/HRC/plink/tsd_libfile_hrc_chr@.bin

export COMMON_FLAGS="${COMMON_FLAGS} --bim-file ${REFERENCE_FOLDER}/hrc_EUR_qc/hrc_chr@_EUR_qc.bim"
export COMMON_FLAGS="${COMMON_FLAGS} --ld-file ${REFERENCE_FOLDER}/hrc_EUR_qc/hrc_chr@_EUR_qc.run1.ld"
export COMMON_FLAGS="${COMMON_FLAGS} --use-complete-tag-indices --loadlib-file ${LOADLIB_FILE}"

export EXTRA_FLAGS_U="--exclude-ranges MHC --z1max 9.336"

# PLSA analysis (new MiXeR model)
if true; then
  # remember that for PLSA analysis sumstats should be split per chromosome, as follows
  # ${MIXER_PY} split_sumstats --trait1-file ${SUMSTATS_FOLDER}/${SUMSTATS_FILE}.sumstats.gz --out ${SUMSTATS_FOLDER}/${SUMSTATS_FILE}.chr@.sumstats.gz

  echo -e '\n=== PLSA FIT0 ===========================================================================\n'
  ${MIXER_PY} plsa --gsa-base ${COMMON_FLAGS} \
          --trait1-file ${SUMSTATS_FOLDER}/${SUMSTATS_FILE}.chr@.sumstats.gz \
          --out ${OUT_FOLDER}/${SUMSTATS_FILE}_rep${REP}.fit0 \
          --extract ${REFERENCE_FOLDER}/hrc_EUR_qc/hrc_EUR_qc.prune_rand2M_rep${REP}.snps --hardprune-r2 0.8 \
          --go-file ${REFERENCE_FOLDER}/gsa-mixer-baseline-annot_27jan2022.csv \
          --go-file-test ${REFERENCE_FOLDER}/gsa-mixer-hybridLOO-annot_27jan2022.csv \
          --annot-file ${REFERENCE_FOLDER}/hrc_EUR_qc/baseline_v2.2_hrc_chr@_EUR_qc.annot.gz \
          --annot-file-test ${REFERENCE_FOLDER}/hrc_EUR_qc/baseline_v2.2_hrc_chr@_EUR_qc.annot.gz \
          --seed $((REP+1000)) --threads ${THREADS} ${EXTRA_FLAGS_U}

  echo -e '\n==== PLSA FIT1 ==========================================================================\n'
  ${MIXER_PY} fit1 ${COMMON_FLAGS} \
          --trait1-file ${SUMSTATS_FOLDER}/${SUMSTATS_FILE}.sumstats.gz \
          --out ${OUT_FOLDER}/${SUMSTATS_FILE}_rep${REP}.fit1 \
          --load-params-file ${OUT_FOLDER}/${SUMSTATS_FILE}_rep${REP}.fit0.json \
          --go-file ${REFERENCE_FOLDER}/gsa-mixer-baseline-annot_27jan2022.csv \
          --annot-file ${REFERENCE_FOLDER}/hrc_EUR_qc/baseline_v2.2_hrc_chr@_EUR_qc.annot.gz \
          --extract ${REFERENCE_FOLDER}/hrc_EUR_qc/hrc_EUR_qc.prune_rand2M_rep${REP}.snps --hardprune-r2 0.8 \
          --seed $((REP+1000)) --threads ${THREADS} ${EXTRA_FLAGS_U} 

  echo -e '\n==== PLSA TEST1 ==========================================================================\n'
  ${MIXER_PY} test1 ${COMMON_FLAGS} \
          --trait1-file ${SUMSTATS_FOLDER}/${SUMSTATS_FILE}.sumstats.gz \
          --out ${OUT_FOLDER}/${SUMSTATS_FILE}_rep${REP}.test1 \
          --load-params-file ${OUT_FOLDER}/${SUMSTATS_FILE}_rep${REP}.fit1.json \
          --go-file ${REFERENCE_FOLDER}/gsa-mixer-baseline-annot_27jan2022.csv \
          --annot-file ${REFERENCE_FOLDER}/hrc_EUR_qc/baseline_v2.2_hrc_chr@_EUR_qc.annot.gz \
          --seed $((REP+1000)) --threads ${THREADS} ${EXTRA_FLAGS_U}  
fi

# non-PLSA analysis (old MiXeR version)
if false; then
  echo -e '\n==== FIT1 ===============================================================================\n'
  ${MIXER_PY} fit1 ${COMMON_FLAGS} \
          --trait1-file ${SUMSTATS_FOLDER}/${SUMSTATS_FILE}.sumstats.gz \
          --out ${OUT_FOLDER}/${SUMSTATS_FILE}_rep${REP}.fit1 \
          --extract ${REFERENCE_FOLDER}/hrc_EUR_qc/hrc_EUR_qc.prune_rand2M_rep${REP}.snps --hardprune-r2 0.8 \
          --seed $((REP+1000)) --threads ${THREADS} ${EXTRA_FLAGS_U}

  echo -e '\n==== TEST1 ==============================================================================\n'
  ${MIXER_PY} test1 ${COMMON_FLAGS} \
          --trait1-file ${SUMSTATS_FOLDER}/${SUMSTATS_FILE}.sumstats.gz \
          --out ${OUT_FOLDER}/${SUMSTATS_FILE}_rep${REP}.test1 \
          --load-params-file ${OUT_FOLDER}/${SUMSTATS_FILE}_rep${REP}.fit1.json \
          --seed $((REP+1000)) --threads ${THREADS} ${EXTRA_FLAGS_U}
fi


#if [[ "${SLURM_ARRAY_TASK_ID}" -eq 1 ]]; then
#  echo -e '\n==== COMBINE / FIGURES ==================================================================\n'
#  ${MIXER_FIGURES_PY} combine --json ${OUT_FOLDER}/${SUMSTATS_FILE}_rep@.fit1.json --out ${OUT_FOLDER}/${SUMSTATS_FILE}_rep@.fit1
#  ${MIXER_FIGURES_PY} combine --json ${OUT_FOLDER}/${SUMSTATS_FILE}_rep@.test1.json --out ${OUT_FOLDER}/${SUMSTATS_FILE}_rep@.test1
#  ${MIXER_FIGURES_PY} one --json ${OUT_FOLDER}/${SUMSTATS_FILE}_rep@.fit1.json --trait1 ${SUMSTATS_FILE} --out ${OUT_FOLDER}/${SUMSTATS_FILE}.fit1 --statistic mean std
#  ${MIXER_FIGURES_PY} one --json ${OUT_FOLDER}/${SUMSTATS_FILE}_rep@.test1.json --trait1 ${SUMSTATS_FILE} --out ${OUT_FOLDER}/${SUMSTATS_FILE}.test1 --statistic mean std
#fi

# Run the following to make a .csv table with results across multiple traits
#   ${MIXER_FIGURES_PY} one --json ${OUT_FOLDER}/*_rep@.fit1.json --out ${OUT_FOLDER}/UNIVAR_results_fit1 --statistic mean std
#
# Run the following if you're interested to check multiple power curves on one figure:
#   ${MIXER_FIGURES_PY} one --json ${OUT_FOLDER}/*_rep@.test1.json --out ${OUT_FOLDER}/UNIVAR_results_test1 --statistic mean std

