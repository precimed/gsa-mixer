import pandas as pd
import numpy as np
from collections import defaultdict
import os
import sys
import argparse

"""
Use output of uniq_annot.py and files with r2 coefficients generated by plink
(e.g. chr{i}.height.2m.r2.ld.gz i=1..22) to construct ld-informed annotations.
"""


def parseArgs(args):
    parser = argparse.ArgumentParser(
        description="Creates LD informed annotation matrix from the output of uniq_annot.py")
    parser.add_argument("annot_file", help="Non-overlapping annotation file (output of uniq_annot.py)")
    parser.add_argument("ld_r2_dir", help="Directory with precalculated LD r2 scores")
    parser.add_argument("out_file", help="Output file name")
    parser.add_argument("--ld-r2-prefix", default="chr", help="Suffix for LD file: {prefix}{1-22}{suffix}")
    parser.add_argument("--ld-r2-suffix", default=".schork.r2.ld.gz", help="Suffix for LD file: {prefix}{1-22}{suffix}")
    return parser.parse_args(args)


def main():
    #chr_r2_file_dir = "/mnt/seagate10/genotypes/ldsc489eur10m/schork/"
    #chr_r2_prefix = "1000g.eur.qc."
    #chr_r2_suffix = ".schork.r2.ld.gz"
    ## nonoverlapping_annot_file file is created with uniq_annot.py script
    #nonoverlapping_annot_file = "/mnt/seagate10/genotypes/ldsc489eur10m/template.ldsc489eur10m.sorted.complete_annot_hg19.annomat.uniq.txt.gz"
    #out_f_name = "/mnt/seagate10/genotypes/ldsc489eur10m/template.ldsc489eur10m.sorted.complete_annot_hg19.annomat.uniq.ld_informed.txt.gz"
    #annot2use = ["5UTR", "3UTR", "Exon", "Intron", "1kUp", "1kDown", "10kUp",
    #    "10kDown"]
    #auxiliary_annot = ["NoncodingTranscript", "100kUp", "100kDown", "mirna",
    #    "tfbs"]

    args = parseArgs(sys.argv[1:])
    print("Processing %s" % args.annot_file)

    chr_r2_file_dir = args.ld_r2_dir  #"/mnt/seagate10/genotypes/1000genomes503eur9m/schork/"
    chr_r2_prefix = args.ld_r2_prefix # "chr"
    chr_r2_suffix = args.ld_r2_suffix # ".schork.r2.ld.gz"
    # nonoverlapping_annot_file file is created with uniq_annot.py script
    nonoverlapping_annot_file = args.annot_file # "/mnt/seagate10/genotypes/1000genomes503eur9m/template.1000genomes503eur9m.sorted.complete_annot_hg19.annomat.uniq.txt.gz"
    out_f_name = args.out_file # "/mnt/seagate10/genotypes/1000genomes503eur9m/template.1000genomes503eur9m.sorted.complete_annot_hg19.annomat.uniq.ld_informed.txt.gz"
    annot2use = ["5UTR", "3UTR", "Exon", "Intron", "1kUp", "1kDown", "10kUp",
                "10kDown"]
    auxiliary_annot = ["NoncodingTranscript", "100kUp", "100kDown", "mirna",
                "tfbs"]


    dfa = pd.read_csv(nonoverlapping_annot_file, sep="\t")
    df_annot2use = dfa[annot2use]

    ld_annot_data = df_annot2use.values.copy().astype(float)

    # snp_i : annot_i,
    # where
    #     snp_i - index of snp in dfa["SNP"]
    #     annot_i - index of annotation category in annot2use
    snp_annot = dict(zip(*np.where(ld_annot_data)))

    # snp_id : snp_i
    snp_ind = dict(zip(dfa.SNP, dfa.index))

    # snp_i : [snp_i_1, snp_i_2, ...] - ids of snps in LD with the key snp
    snp_in_ld_id = defaultdict(list)
    # snp_i : [snp_r2_1, snp_r2_2, ...] - r2 of snps in LD with the key snp
    snp_in_ld_r2 = defaultdict(list)
    for i in range(1,23):
        # chr3.schork.r2.ld.gz
        f_name = os.path.join(chr_r2_file_dir, f"{chr_r2_prefix}{i}{chr_r2_suffix}")
        print("Reading %s" % f_name)
        df = pd.read_csv(f_name, usecols=["SNP_A", "SNP_B", "R2"],
            delim_whitespace=True, dtype={"R2":np.float32})
        for row in df.itertuples():
            i1 = snp_ind[row.SNP_A]
            i2 = snp_ind[row.SNP_B]
            snp_in_ld_id[i1].append(i2)
            snp_in_ld_id[i2].append(i1)
            snp_in_ld_r2[i1].append(row.R2)
            snp_in_ld_r2[i2].append(row.R2)

    for snp_i, snp_in_ld_ii in snp_in_ld_id.items():
        if snp_i%100000 == 0: print("%d snp processed" % snp_i)
        snp_i_r2 = snp_in_ld_r2[snp_i]
        annot_ii = [snp_annot[i] for i in snp_in_ld_ii if i in snp_annot]
        annot_r2 = [r2 for i,r2 in zip(snp_in_ld_ii, snp_i_r2)
                if i in snp_annot]
        annot_ld = np.bincount(annot_ii, annot_r2, len(annot2use))
        ld_annot_data[snp_i] += annot_ld

    i = ld_annot_data<1
    ld_annot_data[i] = 0
    ld_annot_data[~i] = 1

    out_df = pd.DataFrame(index=dfa.SNP, columns=annot2use, data=ld_annot_data)
    # add intergenic column properly based on auxiliary annotation columns from dfa
    intergenic = np.zeros(len(out_df))
    i = (out_df.sum(1).values + dfa[auxiliary_annot].sum(1).values) == 0
    intergenic[i] = 1
    out_df["Intergenic"] = intergenic

    out_df = out_df.astype(int)
    print(out_df.sum())

    print("Saving result to %s" % out_f_name)
    out_df.to_csv(out_f_name, sep='\t', compression='gzip')


if __name__ == "__main__":
    print("Start")
    main()
    print("Done")
