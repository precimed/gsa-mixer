/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink

This folder contains HRC reference converted to plink format after sample & variant QC

Final files:
    hrc_chr[1-22]_EUR_qc.[bed,bim,fan]

    N=23152 (all but chr1)
    N=18969 (chr1)
    11980511 markers

Sample QC:
    1. Keep EUR ancestry individuals (defined by PC1-vs-PC2 in 1kG
    2. Keep unrelated individuals (king --unrelated --degree 2)

Variant QC:
    1. --maf 0.001 --hwe 1e-10 --geno 0.1         # leaves 12117992
    2. exclude markers with '.' instead of rs#    # removes 124661 variants out of 12117992
    3. exclude duplicated IDs                     # removes in ther order of ~6000 variants


======================================================================================================

# Step 1 - convert haplotypes.bcf.gz to plink 

files = '''
_egaz00001239271_hrc.r1-1.ega.grch37.chr4.haplotypes
_egaz00001239270_hrc.r1-1.ega.grch37.chr3.haplotypes
_egaz00001239269_hrc.r1-1.ega.grch37.chr2.haplotypes
_egaz00001239268_hrc.r1-1.ega.grch37.chr1.haplotypes.noibd
_egaz00001239292_hrc.r1-1.ega.grch37.chrx_par2.haplotypes
_egaz00001239291_hrc.r1-1.ega.grch37.chrx_nonpar.haplotypes
_egaz00001239290_hrc.r1-1.ega.grch37.chrx_par1.haplotypes
_egaz00001239289_hrc.r1-1.ega.grch37.chr22.haplotypes
_egaz00001239288_hrc.r1-1.ega.grch37.chr21.haplotypes
_egaz00001239287_hrc.r1-1.ega.grch37.chr20.haplotypes
_egaz00001239286_hrc.r1-1.ega.grch37.chr19.haplotypes
_egaz00001239285_hrc.r1-1.ega.grch37.chr18.haplotypes
_egaz00001239284_hrc.r1-1.ega.grch37.chr17.haplotypes
_egaz00001239283_hrc.r1-1.ega.grch37.chr16.haplotypes
_egaz00001239282_hrc.r1-1.ega.grch37.chr15.haplotypes
_egaz00001239281_hrc.r1-1.ega.grch37.chr14.haplotypes
_egaz00001239280_hrc.r1-1.ega.grch37.chr13.haplotypes
_egaz00001239279_hrc.r1-1.ega.grch37.chr12.haplotypes
_egaz00001239278_hrc.r1-1.ega.grch37.chr11.haplotypes
_egaz00001239277_hrc.r1-1.ega.grch37.chr10.haplotypes
_egaz00001239276_hrc.r1-1.ega.grch37.chr9.haplotypes
_egaz00001239275_hrc.r1-1.ega.grch37.chr8.haplotypes
_egaz00001239274_hrc.r1-1.ega.grch37.chr7.haplotypes
_egaz00001239273_hrc.r1-1.ega.grch37.chr6.haplotypes
_egaz00001239272_hrc.r1-1.ega.grch37.chr5.haplotypes
'''.split()

template = '''#!/bin/bash
#SBATCH --job-name=bcftools
#SBATCH --account=p697_norment
##SBATCH --account=p697_norment_dev
#SBATCH --time=24:00:00
#SBATCH --ntasks=1
#SBATCH --mem-per-cpu=8G
#SBATCH --cpus-per-task=2

source /cluster/bin/jobsetup
set -o errexit

module load BCFtools/1.9-foss-2018b
module load plink

plink --memory 16000 --bcf /cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/{f}.bcf.gz --make-bed --out /cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_{chri}
'''

fbatch = open('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/plink_sbatch.sh', 'w')
for file in files:
    chrlabel = file.split('.')[4]
    f = open("/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/plink_script_{}.sh".format(chrlabel), "w")
    f.write(template.format(f=file, chri=chrlabel))
    f.close()
    fbatch.write('sbatch plink_script_{}.sh\n'.format(chrlabel))
fbatch.close()

======================================================================================================

# Step 2 - Extract hm3 SNPs from 1kG and HRC (this is needed to calculate PC)

# /cluster/projects/p697/users/ofrei/ukb_height_prs
# these steps are already done in ukb_height_prs

# Get duplicated variats
seq 22 | parallel -j11 "zgrep -v '^#' ./20130502/ALL.chr{}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz | cut -f3 | sort | uniq -d > chr{}.dups"

# Get sex of all samples
tail -n+2 ./20130502/integrated_call_samples_v2.20130502.ALL.ped | awk 'BEGIN{OFS="\t"; FS="\t";} {print($2,$2,$5)}' > samples.sex

# get just RS numbers
tail -n +2 w_hm3.snplist  | awk '{ print $1 }' > w_hm3.justrs

# filter out hm3 SNPs. Use default QC filters.
seq 22 | parallel -j8 "plink --vcf ./20130502/ALL.chr{}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz --biallelic-only strict --out chr{} --make-bed --mind 0.1 --geno 0.1 --hwe 1.E-20 midp --maf 0.01 --exclude chr{}.dups --extract w_hm3.justrs --update-sex samples.sex"

# filter out hm3 SNPs from HRC.
# seq 22 | parallel -j8 "plink --bfile hrc_chr{} --out hrc_hm3_chr{} --make-bed --geno 0.1 --hwe 1.E-20 midp --maf 0.01 --extract w_hm3.justrs"
# (see JOB_ARRAY instead).


======================================================================================================
# Step 3 - Find *shared* hm3 SNPs present both in  1kG and HRC (this is needed to calculate PC)

import pandas as pd
hrc=pd.concat([pd.read_csv('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_hm3_chr{}.bim'.format(i), sep='\t', header=None, names='CHR SNP GP BP A1 A2'.split()) for i in range(1, 23)])
kg=pd.concat([pd.read_csv('/cluster/projects/p697/users/ofrei/ukb_height_prs/20130502_hm3/chr{}.bim'.format(i), sep='\t', header=None, names='CHR SNP GP BP A1 A2'.split()) for i in range(1, 23)])
ref=pd.merge(hrc, kg, on='SNP')
ref=ref[~ref['SNP'].duplicated(keep=False)].copy()
ref[['SNP']].to_csv('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_1kg_hm3.justrs', index=False, header=None)

======================================================================================================

# Step 4 - Extract *shared* hm3 SNPs present both in  1kG and HRC, and merge all chromosomes together. Compute principal components with flashpca.

seq 2 22 | parallel echo "/cluster/projects/p697/users/ofrei/ukb_height_prs/20130502_hm3/chr{}" > 20130502_hm3/merge_list.txt
seq 2 22 | parallel echo "hrc_hm3filt_chr{}" > hrc_hm3/merge_list.txt

plink --bfile hrc_hm3filt_chr1 --merge-list ./hrc_hm3/merge_list.txt --make-bed --extract hrc_1kg_hm3.justrs --out ./hrc_hm3/chr_all
plink --bfile /cluster/projects/p697/users/ofrei/ukb_height_prs/20130502_hm3/chr1 --merge-list ./20130502_hm3/merge_list.txt --make-bed --extract hrc_1kg_hm3.justrs --out ./20130502_hm3/chr_all

plink --bfile ./20130502_hm3/chr_all --indep-pairwise 1000 50 0.05 --exclude range exclusion_regions.txt
plink --bfile ./20130502_hm3/chr_all --extract plink.prune.in --make-bed --out ./20130502_hm3/chr_all_pruned
plink --bfile ./hrc_hm3/chr_all --a1-allele ./20130502_hm3/chr_all_pruned.bim 5 2  --extract plink.prune.in --make-bed --out ./hrc_hm3/chr_all_pruned

#plink --bfile ./20130502_hm3/chr_all_pruned --bmerge ./cal_hm3/chr_all_pruned --make-bed --out chr_all_prune   <- no need to merge

./flashpca_x86-64 --bfile 20130502_hm3/chr_all_pruned --outload loadings_20130502_hm3.txt --outmeansd meansd_20130502_hm3.txt --suffix _20130502_hm3.txt

./flashpca_x86-64 --bfile hrc_hm3/chr_all_pruned --project --inmeansd meansd_20130502_hm3.txt  --outproj projections_hrc_hm3.txt --inload loadings_20130502_hm3.txt -v



======================================================================================================

# Step 5 Annotate ancestry using very simple clustering algorithm :)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal

annot=pd.read_csv('/cluster/projects/p697/users/ofrei/ukb_height_prs/integrated_call_samples_v3.20130502.ALL.panel', delim_whitespace=True)
df=pd.read_csv('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/pcs_20130502_hm3.txt', delim_whitespace=True)
hrc=pd.read_csv('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/projections_hrc_hm3.txt', delim_whitespace=True)
df=pd.merge(df, annot, how='left', left_on='IID', right_on='sample')
hrc['ANCESTRY'] = 'unknown'
print(len(hrc), len(df))

#df['super_pop'].loc[df['pop']=='FIN']='FIN'



======================================================================================================

# run twice to show annotated HRC
pcX = 'PC1'
pcY = 'PC2'
hrc_plot = hrc[hrc['ANCESTRY'] == 'EUR'].copy()
plt.plot(hrc_plot[pcX].values, hrc_plot[pcY].values, '.', color='k')
colors={'EUR':0, 'EAS':1, 'AMR':2, 'SAS': 3, 'AFR': 4} #, 'FIN': 5}
cm = plt.cm.get_cmap('tab10')
for pop in df['super_pop'].unique():
    df_pop = df[df['super_pop'] == pop].copy()
    plt.plot(df_pop[pcX].values, df_pop[pcY].values, '.', color=cm.colors[colors[pop]], label=pop)
    
    data=df_pop[[pcX, pcY]].values
    data_mean = np.mean(data,  axis=0)
    data_cov = np.cov(data, rowvar=0)

    var = multivariate_normal(mean=data_mean, cov=data_cov)
    hrc['{}'.format(pop)]=var.pdf(hrc[[pcX, pcY]].values)
plt.legend()
plt.xlim([-0.15, 0]); plt.ylim([0.1, 0.3])
pop_vec=['EUR', 'EAS',  'AMR', 'SAS', 'AFR'] #, 'FIN']
hrc['ANCESTRY'] = [pop_vec[x] for x in np.argmax(hrc[pop_vec].values, axis=1)]
hrc[['FID', 'IID', 'ANCESTRY']].to_csv('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_ancestry.csv',sep='\t',index=False)
plt.title(', '.join(  ['{}: {}'.format(x,y) for x, y in zip(hrc['ANCESTRY'].value_counts().index, hrc['ANCESTRY'].value_counts().values)] ))
plt.savefig('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_ancestry.png')
hrc['ANCESTRY'].value_counts()
hrc[hrc['ANCESTRY']=='EUR'][['FID', 'IID']].to_csv('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_ancestry_EUR.txt',index=False,header=None, sep='\t')
======================================================================================================

colors={'EUR':0, 'EAS':1, 'AMR':2, 'SAS': 3, 'AFR': 4} #, 'FIN': 5}
cm = plt.cm.get_cmap('tab10')
plt.figure(figsize=(15,10))
for index, (pcX, pcY) in enumerate([('PC1', 'PC2'), ('PC1', 'PC3'), ('PC2', 'PC3'), ('PC1', 'PC4'), ('PC2', 'PC4'), ('PC3', 'PC4')]):
    plt.subplot(2,3,index+1)
    hrc_plot = hrc[hrc['ANCESTRY'] == 'EUR'].copy()
    plt.plot(hrc_plot[pcX].values, hrc_plot[pcY].values, '.', color='k')
    #xlims = plt.xlim(); plt.xlim([xlims[1], xlims[0]]) ;     ylims = plt.ylim(); plt.ylim([ylims[1], ylims[0]]) 
    for pop in df['super_pop'].unique():
        df_pop = df[df['super_pop'] == pop].copy()
        plt.plot(df_pop[pcX].values, df_pop[pcY].values, '.', color=cm.colors[colors[pop]], label=pop)
    plt.legend()
    #plt.xlim([-0.15, 0]); plt.ylim([0.1, 0.3])
    plt.xlabel(pcX)
    plt.ylabel(pcY)
#plt.savefig('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_ancestry_PC1-PC4_zoom.png')
plt.savefig('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_ancestry_PC1-PC4.png')
======================================================================================================

# Extract EUR ancestry, then extract unrelated individuals with KING.

plink --bfile hrc_hm3/chr_all --keep hrc_ancestry_EUR.txt --make-bed --out  hrc_hm3/chr_all_EUR
./king225 -b hrc_hm3/chr_all_EUR.bed --prefix hrc_hm3/chr_all_EUR_king_deg2_ --unrelated --degree 2

./king225 -b 20130502_hm3/chr_all.bed --prefix 20130502_hm3/chr_all_king_deg2_ --unrelated --degree 2

======================================================================================================

# Perform Variant QC

#See JOB_ARRAY - apply sample & variant QC
# Step 3 - apply sample & variant QC filters
plink --bfile hrc_chr${SLURM_ARRAY_TASK_ID} --keep hrc_hm3/chr_all_EUR_king_deg2_unrelated.txt --out hrc_chr${SLURM_ARRAY_TASK_ID}_EUR_unrelated --make-bed
plink --bfile hrc_chr${SLURM_ARRAY_TASK_ID}_EUR_unrelated --maf 0.001 --hwe 1e-10 --geno 0.1 --make-bed --out hrc_chr${SLURM_ARRAY_TASK_ID}_EUR_qc


hrc=pd.concat([pd.read_csv('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/hrc_chr{}_EUR_qc.bim'.format(i), sep='\t', header=None, names='CHR SNP GP BP A1 A2'.split()) for i in range(1, 23)])
hrc_dups = hrc[['SNP']][hrc['SNP'].duplicated(keep=False)]
hrc_dups.drop_duplicates(keep='first').to_csv('/cluster/projects/p697/projects/moba_qc_imputation/resources/HRC/plink/duplicated_rs.txt',index=False, sep='\t', header=None)
# SNPs without rs# ('.') account only for 124661 variants out of 12117992


plink --bfile hrc_chr${SLURM_ARRAY_TASK_ID}_EUR_unrelated --maf 0.001 --hwe 1e-10 --geno 0.1 --exclude duplicated_rs.txt --make-bed --out hrc_chr${SLURM_ARRAY_TASK_ID}_EUR_qc



# save space
rm *EUR_unrelated.bed

shuf hrc_chr1_EUR_qc.fam | head -n 1000 > shuf_hrc_EUR_qc_1k.fam
seq 2 22 | parallel echo 'hrc_chr{}_EUR_qc_keep1k' > keep1k_merge_lists.txt

 plink --bfile hrc_chr1_EUR_qc_keep1k --merge-list keep1k_merge_lists.txt --make-bed --out hrc_EUR_qc_keep1k


# test king commands
./king225_patch1 -b hrc_hm3/chr_all_EUR.bed --ibs --prefix temp/hrc_king225_patch1
./king225 -b hrc_hm3/chr_all_EUR.bed --ibs --prefix temp/hrc_king

./king225_patch1 -b 20130502_hm3/chr_all.bed --ibs --prefix temp/king225_patch1
./king225        -b 20130502_hm3/chr_all.bed --ibs --prefix temp/king225
